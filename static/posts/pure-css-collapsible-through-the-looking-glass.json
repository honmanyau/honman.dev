{"title":"Pure-CSS collapsible through the looking glass","description":"A dive into the pure-CSS animation rabbit hole: a review of existing methods for creating a pure-CSS collapsible and possible improvements.","date":"2021-07-21","tags":[],"genre":"Post","permalink":"pure-css-collapsible-through-the-looking-glass","contentMarkdown":"\nWhen creating this website, one of the rabbit holes that I dived into is as the title describes. The title challenge was no stranger to me — and one may argue that it was, therefore, a revisit through the looking glass; however, what tempted me to spend more time on this puzzle was the following StackOverflow question that dates back to 2010: [\"How can I transition height: 0; to height: auto; using CSS?\"](https://stackoverflow.com/questions/3508605/how-can-i-transition-height-0-to-height-auto-using-css).\n\nThe [accepted, most upvoted solution](https://stackoverflow.com/a/8331169) in the StackOverflow thread involves assigning an arbitrary value to the `max-height` property of an element. This reason alone should induce enough discomfort in the discerning programmer to at least refrain from assisting its propagation with copypasta, but I digress.\n\nThe purpose of this article is to review existing solutions and show some of the solutions I found in the rabbit hole. As the title indicates, this article covers pure-CSS solutions exclusively, not least because CSS solutions are a subset of those achievable with JavaScript.\n\nWhile it is outside the scope of this article to discuss the practicality and utility of pure-CSS constructs, it is worth noting that they do have legitimate uses in both JavaScript-less and JavaScript-enabled environments. In fact, at the time of writing, the summary of the \"CSS and JavaScript Animation Performance\" article in the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/Performance/CSS_JavaScript_animation_performance) states that:\n\n> Browsers are able to optimize rendering flows. In summary, we should always try to create our animations using CSS transitions/animations where possible.\n\nLast but not least, I consider creating pure-CSS constructs an art form practised under constraints that is not dissimilar to pixel art and 8-bit music: they are first and foremost brain teasers, and there is always much to learn and much fun to be had.\n\n### Disclaimer\n\nThis article is an academic exercise driven by curiosity and naivety. It does not promote the use of complex pure-CSS logic as a substitute for well-tested, maintainable, and accessible solutions.\n\n### A Note on References\n\nThe primary sources referenced for existing solutions are not necessarily the most original but chosen base on information density, the number of valuable insights, and ease of access:\n\n- [\"How can I transition height: 0; to height: auto; using CSS?\"](https://stackoverflow.com/questions/3508605/how-can-i-transition-height-0-to-height-auto-using-css)\n- [\"Using CSS Transitions on Auto Dimensions\"](https://css-tricks.com/using-css-transitions-auto-dimensions)\n\nPlease do not hesitate to contact me should you be aware of missing or better references.\n\n### Problem Statement\n\n#### Ideal\n\nIdeally, we can create an interactive collapsible that has the following characteristics:\n\n1. Completely independent of JavaScript — including state toggling.\n2. Content height-agnostic.\n3. Reversible animation.\n4. Isochronous forward and backward animations.\n5. Animations can take advantage of GPU acceleration.\n6. When `relative`-positioned, toggling between the expanded and collapsed states should induce content reflow.\n7. When `relative`-positioned, any animation-induced document reflow should be continuous.\n\nIf I'm not mistaken, characteristics 5 and 7 are currently mutually exclusive. It is worth noting that I found James Steinbach's [\"Holy Grail of CSS Animation\"](https://jdsteinbach.com/css/holy-grail-css-animation) after creating the list above. It is not my intention to one-up the difficulty by including mutually exclusive characteristics.\n\n#### Reality\n\nIn reality, the most popular solutions suffer from the lack of content height-agnosticism or achieve height-agnosticism by sacrificing some of the other characteristics listed above.\n\n#### Consequences\n\nThe consequences are guess-tistically insignificant to the general population. May occasionally surprise clients or inexperienced developers. In the most severe cases, it may lead to the composition of articles such as this one.\n\n#### Proposal\n\nPlease refer to the relevant sections that follow.\n\n### Background\n\nThe problem in question stems from the fact that a method for a smooth transition to a value of `auto` is currently unavailable. Please refer to [\"Using CSS Transitions\"](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions#which_css_properties_can_be_transitioned) article of the [MDN Web Docs](https://developer.mozilla.org) for a brief explanation, and the GitHub Issue [\"\\[css-transitions\\] Transition to Height (or width) `auto`\"](https://github.com/w3c/csswg-drafts/issues/626) for possible development.\n\n### Prior Art\n\nThis part of the article describes existing methods according to the referenced implementation details. Solutions built upon these methods, or parts of these methods, could have very different characteristics — for example, the inclusion of a wrapper ongoing from method 2 to method 3.\n\nNote that the discussion below focuses heavily on document reflow because the title problem is a non-problem for where document reflow is irrelevant.\n\n#### Two-state Toggling\n\nToggling between two states is the preferred method for pragmatists. It is often implemented simply by toggling between `display: none` and `display: block` (applicable to any non-`none` value); or between `height: 0` and `height: auto`. The use of the `detail` and `summary` HTML elements is similar to this method when it is semantically appropriate to use them.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"collapsible\">\n <!-- Content -->\n</div>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n display: none;\n}\n\n/* Expanded */\n.toggle:checked ~ .collapsible {\n display: block;\n}\n```\n\n**CodePen demo**: [Two-state toggling](https://codepen.io/honmanyau/full/NWjdqrg). \\\n**Ideal characteristics**: 1, 2, 3, 4, 6.\n\n#### Predefined `max-height`\n\nTransitioning the `max-height` property of an element to a predefined value is the most touted \"solution\" to the title problem. There is no shortage of information on this method; for this reason, please refer to [\"Using CSS Transitions on Auto Dimensions\"](https://css-tricks.com/using-css-transitions-auto-dimensions/#technique-1-max-height) for a detailed explanation of this method.\n\nThis method is objectively inferior in cases where the animation is outside of a document's normal flow—such as an `absolute`-positioned element — as there exist alternatives that are both more performant and are height-agnostic.\n\nHowever, in cases where the animation is within a document's flow and a continuous transition is desired, this method offers unparalleled simplicity when used with a relatively short `transition-duration`. It is also worth noting that this method is relatively flexible as it does not rely on the support of a wrapper with a predefined `height`, unlike, for example, the flexbox method.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<ul class=\"collapsible\">\n <!-- Content -->\n</ul>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n max-height: 0;\n transition: max-height 700ms;\n}\n\n/* Expanded */\n.toggle:checked ~ .collapsible {\n max-height: 2048px;\n}\n```\n\n**CodePen demo**: [Predefined `max-height`](https://codepen.io/honmanyau/full/GRmrqaY). \\\n**Ideal characteristics**: 1, 3, 4,\\* 6, 7. \\* When `max-height` equals to final height. \\\n**Reference**: [\"How can I transition height: 0; to height: auto; using CSS?\", answer by Jake](https://stackoverflow.com/a/8331169).\n\n#### The `scale()` Transformation Function\n\nThe relevant section in [\"Using CSS Transitions on Auto Dimensions\"](https://css-tricks.com/using-css-transitions-auto-dimensions/#technique-2-transform-scaley) covers this method in detail. If deformed content during animation is not a concern, this method is effectively perfect when used outside of the document's flow in the context of the ideal characteristics above. On the other hand, this method is unsuitable where animation-triggered content reflow is required. A subtlety worth noting is that the transition from `display: none` to, for example, `display: block` is incompatible with this method.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<ul class=\"collapsible\">\n <!-- Content -->\n</ul>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n transform: scaleY(0);\n transition: transform 700ms;\n}\n\n/* Expanded */\n.toggle:checked ~ .collapsible {\n transform: scaleY(100%);\n}\n```\n\n**CodePen demo**: [The `scale()` Transformation Function](https://codepen.io/honmanyau/full/bGWgLeg). \\\n**Ideal characteristics**: 1, 2, 3, 4, 5. \\\n**Reference**: [\"Using CSS Transitions on Auto Dimensions\"](https://css-tricks.com/using-css-transitions-auto-dimensions/#technique-2-transform-scaley).\n\n#### The `scale()` Transformation Function and `keyframes` Animation\n\nOne way to circumvent the `scale()` transformation function's lack of effect on a document's flow is to use `keyframes` animation to separate the change in `display` and the transform animation. However, the referenced method sacrifices the reverse animation sequence by reducing it to a toggle between `display: block` and `display: none`.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<ul class=\"collapsible\">\n <!-- Content -->\n</ul>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n transform: scaleY(0);\n transition: transform 700ms;\n}\n\n/* Expanded */\n.toggle:checked ~ .collapsible {\n transform: scaleY(100%);\n}\n```\n\n**CodePen demo**: [The `scale()` Transformation Function and `keyframes` Animation](https://codepen.io/honmanyau/full/eYWgKZr). \\\n**Ideal characteristics**: 1, 2, 5, 6. \\\n**Reference**: [\"CSS Snippet for “Animating” both Display and Transform\"](https://jdsteinbach.com/css/snippet-animate-display-transform).\n\n#### Encapsulated `translate()` Transformation Function\n\nThe `translate()` transformation function relies on the help of a wrapper element to hide part of the animated element from the user. The result is similar to that of the `scale()` Transformation Function and `keyframes` Animation method described above.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"container\">\n <ul class=\"collapsible\">\n <!-- Content -->\n </ul>\n</div>\n```\n\n```css\n/* Collapsed */\n.container {\n height: 0;\n overflow: hidden;\n transition: height 700ms;\n}\n\n.collapsible {\n transform: translateY(-100%);\n transition: transform 700ms;\n}\n\n/* Expanded */\n.toggle:checked ~ .container {\n height: auto;\n}\n\n.toggle:checked ~ .container > .collapsible {\n transform: translateY(0);\n}\n```\n\n**CodePen demo**: [Encapsulated `translate()` Transformation Function](https://codepen.io/honmanyau/full/eYWgLYz). \\\n**Ideal characteristics**: 1, 2, 3, 4, 5,\\* 6. \\* Depends on how the wrapper appears and disappears. \\\n**Reference**: [\"Using CSS Transitions on Auto Dimensions\", answer by Sijav](https://stackoverflow.com/a/19207852).\n\n#### Optical Illusion\n\nOne can consider this method an \"improvement\" upon the Two-state Toggling method. It involves applying `transition`s to the top and bottom paddings when toggling between the expanded and collapsed states. It is an optical illusion because the appearance and disappearance of the content are still instantaneous.\n\nThe pedantry expressed towards this method is perhaps somewhat undue: this use of optical illusion produces acceptable results when using a short `transition-duration` on content with a limited height.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<ul class=\"collapsible\">\n <!-- Content -->\n</ul>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n display: none;\n padding: 0 0.6rem;\n transition: padding 700ms;\n}\n\n/* Expanded */\n.toggle:checked ~ .collapsible {\n display: block;\n padding: 1.2rem 0.6rem;\n}\n```\n\n**CodePen demo**: [Optical Illusion](https://codepen.io/honmanyau/full/mdmRzMV). \\\n**Ideal characteristics**: 1, 2,\\* 3,\\* 4,\\* 6, 7.\\* \\* Requires a balance between element height and transition duration. \\\n**Reference**: [\"How can I transition height: 0; to height: auto; using CSS?\", answer by Catharsis](https://stackoverflow.com/a/6486082).\n\n#### Flexbox\n\n[\"Using CSS Transitions on Auto Dimensions\"](https://css-tricks.com/using-css-transitions-auto-dimensions/#technique-1-max-height) covers this method in detail. It is worth noting that this method is arguably the least flexible with height in this article, and its lack of height-agnosticism is the same as transitioning to an exact value using the Predefined `max-height` method at best.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"flex-container\">\n <div class=\"flex-item\">\n <!-- Content -->\n </div>\n\n <ul class=\"collapsible\">\n <!-- Content -->\n </ul>\n\n <div class=\"flex-item\">\n <!-- Content -->\n </div>\n</div>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n margin: 0;\n flex: 0;\n transition: flex-grow 700ms;\n overflow: hidden;\n transition: all 1s;\n}\n\n/* Expanded */\n.toggle:checked ~ .container > .collapsible {\n flex: 1;\n}\n\n/* Static */\n.flex-container {\n display: flex;\n flex-direction: column;\n justify-content: flex-start;\n height: 400px;\n}\n\n.flex-item {\n flex: 1;\n transition: flex-grow 1s;\n border: 2px solid black;\n}\n```\n\n**CodePen demo**: [Flexbox](https://codepen.io/honmanyau/full/gOWgQxv). \\\n**Ideal characteristics**: 1, 3, 4, 6, 7.\\* \\* Appears to be continuous for a small element with a short `transition-duration`. \\\n**Reference**: [\"Using CSS Transitions on Auto Dimensions\"](https://css-tricks.com/using-css-transitions-auto-dimensions/#bonus-technique-flexbox)\n\n#### Transitioning Content Size with `font-size` and `line-height`\n\nFor textual and `em`-sized content, we can achieve height-agnostic transition by changing the `font-size` property. It is a very different animation compared to all other methods described in this article with the way characters grow and wrap. Transitioning the line-height property leads to similar results and has an animation that is similar to those of some of the other methods described.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"collapsible\">\n <!-- Content -->\n</div>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n font-size: 0;\n line-height: 0;\n transition: font-size 700ms, opacity 700ms;\n}\n\n/* Expanded */\n#toggle:checked ~ .collapsible {\n font-size: 1rem;\n line-height: 1.5;\n}\n```\n\n**CodePen demo**: [Transitioning Content Size with `font-size`](https://codepen.io/honmanyau/full/MWmmzKG). \\\n**CodePen demo**: [Transitioning Content Size with `line-height`](https://codepen.io/honmanyau/full/gOWWBEa). \\\n**Ideal characteristics**: 1, 2, 3, 4, 6, 7. \\\n**Reference**: [\"How can I transition height: 0; to height: auto; using CSS?\", answer by Steven Vachon](https://stackoverflow.com/a/30531678), [\"How can I transition height: 0; to height: auto; using CSS?\", answer by Ali Klein](https://stackoverflow.com/a/67305250).\n\n#### Encapsulated Content Duplication\n\nThis method involves wrapping two structurally identical elements in the same containing block and use one of the duplicates, which has `visibility` set to `hidden`, to give the other a context of what `100%` `height` is.\n\nAnimations of the `relative`-positioned wrapper implemented this way do not trigger document reflow. It is a non-GPU-accelerated counterpart of simple CSS transformation functions with the drawback of requiring duplicated content.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"container\">\n <ul class=\"collapsible\">\n <!-- Content -->\n </ul>\n\n <ul class=\"duplicated\">\n <!-- Duplicated content -->\n </ul>\n</div>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n position: absolute;\n height: 0;\n overflow: hidden;\n transition: height 700ms;\n}\n\n/* Expanded */\n.toggle:checked ~ .container > .collapsible {\n height: 100%;\n}\n\n/* Static */\n.container {\n position: relative;\n}\n\n.duplicated {\n visibility: hidden;\n}\n```\n\n**CodePen demo**: [Encapsulated Content Duplication](https://codepen.io/honmanyau/full/poPRqVE). \\\n**Ideal characteristics**: 1, 2, 3, 4. \\\n**Reference**: [\"How can I transition height: 0; to height: auto; using CSS?\", answer by Vivek Maharajh](https://stackoverflow.com/a/35657876)\n\n#### Percentage `margin`\n\nThese methods are usually flawed and based on a [misunderstanding of how the browser evaluates percentage margins and paddings](https://www.hongkiat.com/blog/calculate-css-percentage-margins). We should avoid using percentage margins as a \"height-agnostic\" replacement for setting an arbitrary, predefined value to `max-height`; not least because doing so can lead to unexpected behaviours.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"container\">\n <ul class=\"collapsible\">\n <!-- Content -->\n </ul>\n</div>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n margin-top: -100%;\n overflow: hidden;\n transition: margin-top 700ms;\n}\n\n/* Expanded */\n.toggle:checked ~ .container > .collapsible {\n margin-top: 0;\n}\n\n/* Static */\n.container {\n position: relative;\n overflow: hidden;\n}\n```\n\n**CodePen demo**: [Percentage `margin`](https://codepen.io/honmanyau/full/zYwNyVW). \\\n**Ideal characteristics**: 1, 3, 4. \\\n**Reference**: [\"How can I transition height: 0; to height: auto; using CSS?\", answer by Vivek Maharajh](https://stackoverflow.com/a/35657876)\n\n#### A Bit of Everything\n\nPlease refer to the referenced answer for a very detailed explanation of this method. The greatest strength of this method is that it addresses the problem of anisochronicity and apparent irreversibility in the Predefined max-height approach. However, it is not height-agnostic and relies on many more arbitrarily defined parameters than all other methods.\n\n**Ideal characteristics**: 1, 3, 4, 6, 7. \\\n**Reference**: [\"How can I transition height: 0; to height: auto; using CSS?\", answer by balpha](https://stackoverflow.com/a/43965099)\n\n### Proposed Solutions\n\nBelow are some of the solutions that I found while I was in the rabbit hole. Please do not hesitate to contact me should you find existing documentation for any of them.\n\n#### Double Encapsulation and Pseudoelement\n\nI initially arrived at this approach when I attempted to create a pure-CSS, height-agnostic menu with a wipe animation for this website. This method requires a pseudoelemnt with the same background behind the content it hides, which is also the biggest downside of this method. Its implementation relies on the following:\n\n- An outer container without a specific height that wraps an inner container.\n- A `relative`-positioned inner container element that encapsulates the \"animated\" content.\n- An `absolute`-positioned pseudoelement that initially hides all content.\n- Using `translate()` or `scale()` on the pseudoelement to make the content visible or hidden with transitions.\n\nThe role of the inner container is two-fold:\n\n- To provide a context for `100%` `height` to the pseudoelement.\n- To mitigate the instantaneous collapsing of all elements for the collapse animation.\n\nThe mitigation is a hack that functions by transitioning between `height: 0` and `height: 42%` _inside a containing block that does not have a specified_ `height` (\"42%\" is chosen for clarity: this method works for **any** positive, non-zero percentage value). Under these conditions, the collapse of the inner container occurs at the end of the transition. In contrast, the corresponding transition involving a pair of non-interpolable values, such as `0` and `auto`, would result in the inner container collapsing at the _beginning_ of the transition.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"outer-container\">\n <div class=\"inner-container\">\n <div class=\"collapsible\">\n <!-- Content -->\n </div>\n </div>\n</div>\n```\n\n```css\n/* Collapsed */\n.inner-container {\n height: 0;\n transition: height 700ms;\n}\n\n.collapsible::before {\n content: ' ';\n position: absolute;\n display: block;\n width: 100%;\n height: 100%;\n transform: scaleY(1);\n transform-origin: bottom;\n transition: transform 700ms;\n}\n\n/* Expanded */\n#toggle:checked ~ .outer-container > .inner-container {\n height: 1%;\n}\n\n#toggle:checked ~ .outer-container > .inner-container > .collapsible::before {\n transform: scaleY(0);\n}\n```\n\n**CodePen demo**: [Double Encapsulation and Pseudoelement](https://codepen.io/honmanyau/full/gOWxNXp). \\\n**Ideal characteristics**: 1, 2, 3, 4, 5, 6.\n\n#### Encapsulated `scale()` Transformation Function\n\nThe proposed solution above relies on a pseudoelement to achieve a wipe effect without content deformation. With the `scale()` transformation, we can use one fewer container and do not need a pseudoelement if content deformation is not a concern.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"container\">\n <div class=\"collapsible\">\n <!-- Content -->\n </div>\n</div>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n height: 0;\n transform: scaleY(0);\n transform-origin: top;\n transition: height 700ms, transform 700ms;\n}\n\n/* Expanded */\n#toggle:checked ~ .container {\n height: 42%;\n transform: scaleY(1);\n}\n```\n\n**CodePen demo**: [Encapsulated `scale()` Transformation Function](https://codepen.io/honmanyau/full/abWwzZd). \\\n**Ideal characteristics**: 1, 2, 3, 4, 5, 6.\n\n#### Encapsulated `clip-path`\n\nThis also does not require a pseudoelement and produces the same type of animation as the pseudoelement method. Transitioning the `clip-path` property is not hardware-accelerated in major browsers at the time of writing, but will [likely become available in the future](https://developer.chrome.com/blog/hardware-accelerated-animations). Other than the current lack of support from hardware acceleration, this approach is much more versatile and elegant than the pseudoelement method.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"container\">\n <div class=\"collapsible\">\n <!-- Content -->\n </div>\n</div>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n height: 0;\n clip-path: polygon(0 0, 100% 0, 100% 0, 0 0);\n transition: height 700ms, clip-path 700ms;\n}\n\n/* Expanded */\n#toggle:checked ~ .container > .collapsible {\n height: 42%;\n clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);\n}\n```\n\n**CodePen demo**: [Encapsulated `clip-path`](https://codepen.io/honmanyau/full/rNmwaLN). \\\n**Ideal characteristics**: 1, 2, 3, 4, 6.\n\n#### Enforcing Aspect Ratio\n\nThis method draws inspiration from the [Aspect Ratio Boxes](https://css-tricks.com/aspect-ratio-boxes) article on [CSS Tricks](https://css-tricks.com). With this approach, we transition the `width` property of an element, which we usually have better control over compared to height. This method is partially height-agnostic in that it works well for non-overflowing content designed to fill one or both dimensions of the collapsible.\n\nThe code example below shows a more versatile version of this method that includes a container element. A container element is not necessary if the width of the collapsible in the fully expanded state is the same as its containing block.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"container\">\n <div class=\"collapsible\">\n <!-- Content -->\n </div>\n</div>\n```\n\n```css\n/* Collapsed */\n.container {\n max-width: 0;\n overflow: hidden;\n}\n\n.collapsible {\n height: 0;\n width: 100%;\n padding-top: 56.25%;\n background-image: url('...');\n background-position: center;\n background-repeat: no-repeat;\n background-size: contain;\n overflow: hidden;\n}\n\n/* Expanded */\n#toggle:checked ~ .container {\n max-width: 400px;\n}\n```\n\nMost modern browsers now support the `aspect-ratio` CSS property. Using this CSS property does not require a container, and the collapsible can accommodate any type of content without any `position` hacks.\n\n```html\n<input id=\"toggle\" type=\"checkbox\" />\n\n<div class=\"collapsible\">\n <!-- Content -->\n</div>\n```\n\n```css\n/* Collapsed */\n.collapsible {\n max-width: 0;\n width: 100%;\n aspect-ratio: 16 / 9;\n background-image: url('...');\n background-position: center;\n background-repeat: no-repeat;\n background-size: contain;\n overflow: hidden;\n transition: visibility 700ms, max-width 700ms;\n}\n\n/* Expanded */\n#toggle:checked ~ .collapsible {\n max-width: 400px;\n}\n```\n\n**CodePen demo**: [Enforcing Aspect Ratio with `padding`](https://codepen.io/honmanyau/full/VwbWwNK). \\\n**CodePen demo**: [Enforcing Aspect Ratio with `aspect-ratio`](https://codepen.io/honmanyau/full/dyWRyEp). \\\n**Ideal characteristics**: 1, 2,\\* 3, 4, 6, 7. \\* When content doesn't overflow the available space \\\n**Reference**: [Aspect Ratio Boxes](https://css-tricks.com/aspect-ratio-boxes).\n\n### Concluding Remarks\n\nThere are broadly two categories of height-agnostic solutions described above: those exhibit ideal characteristics 7, and those do not. In the first category, I feel that the `line-height` and `font-size` methods are the most versatile when used together with `em`-sized content.\n\nThere are equally good approaches in the second category with different types of animation. My personal favourite is the `clip-path` method since it doesn't deform content and can accommodate different shapes. Once hardware acceleration is available for `clip-path` transitions, there is little to dislike about this method.\n\nI have dabbled with other CSS properties such as writing-mode (for taking advantage of `height`-based percentage `margin`), `clamp()`, and CSS variables but failed to come up with anything meaningful. I feel that there are still better solutions than those already covered here. And the rabbit hole doesn't end there — not least because we could measure performance, accessibility, etc. — but the exploration has to stop somewhere.\n\nAs the information covered in this article is time-sensitive, I will only update this article to correct mistakes, add missing references, and add examples that use the same set of CSS features as when it was available at the time this was first published.","contentHtml":"<p>When creating this website, one of the rabbit holes that I dived into is as the title describes. The title challenge was no stranger to me — and one may argue that it was, therefore, a revisit through the looking glass; however, what tempted me to spend more time on this puzzle was the following StackOverflow question that dates back to 2010: <a href=\"https://stackoverflow.com/questions/3508605/how-can-i-transition-height-0-to-height-auto-using-css\">\"How can I transition height: 0; to height: auto; using CSS?\"</a>.</p>\n<p>The <a href=\"https://stackoverflow.com/a/8331169\">accepted, most upvoted solution</a> in the StackOverflow thread involves assigning an arbitrary value to the <code>max-height</code> property of an element. This reason alone should induce enough discomfort in the discerning programmer to at least refrain from assisting its propagation with copypasta, but I digress.</p>\n<p>The purpose of this article is to review existing solutions and show some of the solutions I found in the rabbit hole. As the title indicates, this article covers pure-CSS solutions exclusively, not least because CSS solutions are a subset of those achievable with JavaScript.</p>\n<p>While it is outside the scope of this article to discuss the practicality and utility of pure-CSS constructs, it is worth noting that they do have legitimate uses in both JavaScript-less and JavaScript-enabled environments. In fact, at the time of writing, the summary of the \"CSS and JavaScript Animation Performance\" article in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/CSS_JavaScript_animation_performance\">MDN Web Docs</a> states that:</p>\n<blockquote>\n<p>Browsers are able to optimize rendering flows. In summary, we should always try to create our animations using CSS transitions/animations where possible.</p>\n</blockquote>\n<p>Last but not least, I consider creating pure-CSS constructs an art form practised under constraints that is not dissimilar to pixel art and 8-bit music: they are first and foremost brain teasers, and there is always much to learn and much fun to be had.</p>\n<h3>Disclaimer</h3>\n<p>This article is an academic exercise driven by curiosity and naivety. It does not promote the use of complex pure-CSS logic as a substitute for well-tested, maintainable, and accessible solutions.</p>\n<h3>A Note on References</h3>\n<p>The primary sources referenced for existing solutions are not necessarily the most original but chosen base on information density, the number of valuable insights, and ease of access:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/3508605/how-can-i-transition-height-0-to-height-auto-using-css\">\"How can I transition height: 0; to height: auto; using CSS?\"</a></li>\n<li><a href=\"https://css-tricks.com/using-css-transitions-auto-dimensions\">\"Using CSS Transitions on Auto Dimensions\"</a></li>\n</ul>\n<p>Please do not hesitate to contact me should you be aware of missing or better references.</p>\n<h3>Problem Statement</h3>\n<h4>Ideal</h4>\n<p>Ideally, we can create an interactive collapsible that has the following characteristics:</p>\n<ol>\n<li>Completely independent of JavaScript — including state toggling.</li>\n<li>Content height-agnostic.</li>\n<li>Reversible animation.</li>\n<li>Isochronous forward and backward animations.</li>\n<li>Animations can take advantage of GPU acceleration.</li>\n<li>When <code>relative</code>-positioned, toggling between the expanded and collapsed states should induce content reflow.</li>\n<li>When <code>relative</code>-positioned, any animation-induced document reflow should be continuous.</li>\n</ol>\n<p>If I'm not mistaken, characteristics 5 and 7 are currently mutually exclusive. It is worth noting that I found James Steinbach's <a href=\"https://jdsteinbach.com/css/holy-grail-css-animation\">\"Holy Grail of CSS Animation\"</a> after creating the list above. It is not my intention to one-up the difficulty by including mutually exclusive characteristics.</p>\n<h4>Reality</h4>\n<p>In reality, the most popular solutions suffer from the lack of content height-agnosticism or achieve height-agnosticism by sacrificing some of the other characteristics listed above.</p>\n<h4>Consequences</h4>\n<p>The consequences are guess-tistically insignificant to the general population. May occasionally surprise clients or inexperienced developers. In the most severe cases, it may lead to the composition of articles such as this one.</p>\n<h4>Proposal</h4>\n<p>Please refer to the relevant sections that follow.</p>\n<h3>Background</h3>\n<p>The problem in question stems from the fact that a method for a smooth transition to a value of <code>auto</code> is currently unavailable. Please refer to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions#which_css_properties_can_be_transitioned\">\"Using CSS Transitions\"</a> article of the <a href=\"https://developer.mozilla.org\">MDN Web Docs</a> for a brief explanation, and the GitHub Issue <a href=\"https://github.com/w3c/csswg-drafts/issues/626\">\"[css-transitions] Transition to Height (or width) <code>auto</code>\"</a> for possible development.</p>\n<h3>Prior Art</h3>\n<p>This part of the article describes existing methods according to the referenced implementation details. Solutions built upon these methods, or parts of these methods, could have very different characteristics — for example, the inclusion of a wrapper ongoing from method 2 to method 3.</p>\n<p>Note that the discussion below focuses heavily on document reflow because the title problem is a non-problem for where document reflow is irrelevant.</p>\n<h4>Two-state Toggling</h4>\n<p>Toggling between two states is the preferred method for pragmatists. It is often implemented simply by toggling between <code>display: none</code> and <code>display: block</code> (applicable to any non-<code>none</code> value); or between <code>height: 0</code> and <code>height: auto</code>. The use of the <code>detail</code> and <code>summary</code> HTML elements is similar to this method when it is semantically appropriate to use them.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">display</span>: none;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">display</span>: block;\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/NWjdqrg\">Two-state toggling</a>. <br><strong>Ideal characteristics</strong>: 1, 2, 3, 4, 6.</p>\n<h4>Predefined <code>max-height</code></h4>\n<p>Transitioning the <code>max-height</code> property of an element to a predefined value is the most touted \"solution\" to the title problem. There is no shortage of information on this method; for this reason, please refer to <a href=\"https://css-tricks.com/using-css-transitions-auto-dimensions/#technique-1-max-height\">\"Using CSS Transitions on Auto Dimensions\"</a> for a detailed explanation of this method.</p>\n<p>This method is objectively inferior in cases where the animation is outside of a document's normal flow—such as an <code>absolute</code>-positioned element — as there exist alternatives that are both more performant and are height-agnostic.</p>\n<p>However, in cases where the animation is within a document's flow and a continuous transition is desired, this method offers unparalleled simplicity when used with a relatively short <code>transition-duration</code>. It is also worth noting that this method is relatively flexible as it does not rely on the support of a wrapper with a predefined <code>height</code>, unlike, for example, the flexbox method.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">max-height</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">transition</span>: max-height <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">max-height</span>: <span class=\"hljs-number\">2048px</span>;\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/GRmrqaY\">Predefined <code>max-height</code></a>. <br><strong>Ideal characteristics</strong>: 1, 3, 4,* 6, 7. * When <code>max-height</code> equals to final height. <br><strong>Reference</strong>: <a href=\"https://stackoverflow.com/a/8331169\">\"How can I transition height: 0; to height: auto; using CSS?\", answer by Jake</a>.</p>\n<h4>The <code>scale()</code> Transformation Function</h4>\n<p>The relevant section in <a href=\"https://css-tricks.com/using-css-transitions-auto-dimensions/#technique-2-transform-scaley\">\"Using CSS Transitions on Auto Dimensions\"</a> covers this method in detail. If deformed content during animation is not a concern, this method is effectively perfect when used outside of the document's flow in the context of the ideal characteristics above. On the other hand, this method is unsuitable where animation-triggered content reflow is required. A subtlety worth noting is that the transition from <code>display: none</code> to, for example, <code>display: block</code> is incompatible with this method.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scaleY</span>(<span class=\"hljs-number\">0</span>);\n <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scaleY</span>(<span class=\"hljs-number\">100%</span>);\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/bGWgLeg\">The <code>scale()</code> Transformation Function</a>. <br><strong>Ideal characteristics</strong>: 1, 2, 3, 4, 5. <br><strong>Reference</strong>: <a href=\"https://css-tricks.com/using-css-transitions-auto-dimensions/#technique-2-transform-scaley\">\"Using CSS Transitions on Auto Dimensions\"</a>.</p>\n<h4>The <code>scale()</code> Transformation Function and <code>keyframes</code> Animation</h4>\n<p>One way to circumvent the <code>scale()</code> transformation function's lack of effect on a document's flow is to use <code>keyframes</code> animation to separate the change in <code>display</code> and the transform animation. However, the referenced method sacrifices the reverse animation sequence by reducing it to a toggle between <code>display: block</code> and <code>display: none</code>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scaleY</span>(<span class=\"hljs-number\">0</span>);\n <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scaleY</span>(<span class=\"hljs-number\">100%</span>);\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/eYWgKZr\">The <code>scale()</code> Transformation Function and <code>keyframes</code> Animation</a>. <br><strong>Ideal characteristics</strong>: 1, 2, 5, 6. <br><strong>Reference</strong>: <a href=\"https://jdsteinbach.com/css/snippet-animate-display-transform\">\"CSS Snippet for “Animating” both Display and Transform\"</a>.</p>\n<h4>Encapsulated <code>translate()</code> Transformation Function</h4>\n<p>The <code>translate()</code> transformation function relies on the help of a wrapper element to hide part of the animated element from the user. The result is similar to that of the <code>scale()</code> Transformation Function and <code>keyframes</code> Animation method described above.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.container</span> {\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">overflow</span>: hidden;\n <span class=\"hljs-attribute\">transition</span>: height <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translateY</span>(-<span class=\"hljs-number\">100%</span>);\n <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.container</span> {\n <span class=\"hljs-attribute\">height</span>: auto;\n}\n\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.container</span> &gt; <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translateY</span>(<span class=\"hljs-number\">0</span>);\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/eYWgLYz\">Encapsulated <code>translate()</code> Transformation Function</a>. <br><strong>Ideal characteristics</strong>: 1, 2, 3, 4, 5,* 6. * Depends on how the wrapper appears and disappears. <br><strong>Reference</strong>: <a href=\"https://stackoverflow.com/a/19207852\">\"Using CSS Transitions on Auto Dimensions\", answer by Sijav</a>.</p>\n<h4>Optical Illusion</h4>\n<p>One can consider this method an \"improvement\" upon the Two-state Toggling method. It involves applying <code>transition</code>s to the top and bottom paddings when toggling between the expanded and collapsed states. It is an optical illusion because the appearance and disappearance of the content are still instantaneous.</p>\n<p>The pedantry expressed towards this method is perhaps somewhat undue: this use of optical illusion produces acceptable results when using a short <code>transition-duration</code> on content with a limited height.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">display</span>: none;\n <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0.6rem</span>;\n <span class=\"hljs-attribute\">transition</span>: padding <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">display</span>: block;\n <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">1.2rem</span> <span class=\"hljs-number\">0.6rem</span>;\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/mdmRzMV\">Optical Illusion</a>. <br><strong>Ideal characteristics</strong>: 1, 2,* 3,* 4,* 6, 7.* * Requires a balance between element height and transition duration. <br><strong>Reference</strong>: <a href=\"https://stackoverflow.com/a/6486082\">\"How can I transition height: 0; to height: auto; using CSS?\", answer by Catharsis</a>.</p>\n<h4>Flexbox</h4>\n<p><a href=\"https://css-tricks.com/using-css-transitions-auto-dimensions/#technique-1-max-height\">\"Using CSS Transitions on Auto Dimensions\"</a> covers this method in detail. It is worth noting that this method is arguably the least flexible with height in this article, and its lack of height-agnosticism is the same as transitioning to an exact value using the Predefined <code>max-height</code> method at best.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"flex-container\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"flex-item\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"flex-item\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">transition</span>: flex-grow <span class=\"hljs-number\">700ms</span>;\n <span class=\"hljs-attribute\">overflow</span>: hidden;\n <span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">1s</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.container</span> &gt; <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-comment\">/* Static */</span>\n<span class=\"hljs-selector-class\">.flex-container</span> {\n <span class=\"hljs-attribute\">display</span>: flex;\n <span class=\"hljs-attribute\">flex-direction</span>: column;\n <span class=\"hljs-attribute\">justify-content</span>: flex-start;\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">400px</span>;\n}\n\n<span class=\"hljs-selector-class\">.flex-item</span> {\n <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>;\n <span class=\"hljs-attribute\">transition</span>: flex-grow <span class=\"hljs-number\">1s</span>;\n <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">2px</span> solid black;\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/gOWgQxv\">Flexbox</a>. <br><strong>Ideal characteristics</strong>: 1, 3, 4, 6, 7.* * Appears to be continuous for a small element with a short <code>transition-duration</code>. <br><strong>Reference</strong>: <a href=\"https://css-tricks.com/using-css-transitions-auto-dimensions/#bonus-technique-flexbox\">\"Using CSS Transitions on Auto Dimensions\"</a></p>\n<h4>Transitioning Content Size with <code>font-size</code> and <code>line-height</code></h4>\n<p>For textual and <code>em</code>-sized content, we can achieve height-agnostic transition by changing the <code>font-size</code> property. It is a very different animation compared to all other methods described in this article with the way characters grow and wrap. Transitioning the line-height property leads to similar results and has an animation that is similar to those of some of the other methods described.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">transition</span>: font-size <span class=\"hljs-number\">700ms</span>, opacity <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-id\">#toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1rem</span>;\n <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">1.5</span>;\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/MWmmzKG\">Transitioning Content Size with <code>font-size</code></a>. <br><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/gOWWBEa\">Transitioning Content Size with <code>line-height</code></a>. <br><strong>Ideal characteristics</strong>: 1, 2, 3, 4, 6, 7. <br><strong>Reference</strong>: <a href=\"https://stackoverflow.com/a/30531678\">\"How can I transition height: 0; to height: auto; using CSS?\", answer by Steven Vachon</a>, <a href=\"https://stackoverflow.com/a/67305250\">\"How can I transition height: 0; to height: auto; using CSS?\", answer by Ali Klein</a>.</p>\n<h4>Encapsulated Content Duplication</h4>\n<p>This method involves wrapping two structurally identical elements in the same containing block and use one of the duplicates, which has <code>visibility</code> set to <code>hidden</code>, to give the other a context of what <code>100%</code> <code>height</code> is.</p>\n<p>Animations of the <code>relative</code>-positioned wrapper implemented this way do not trigger document reflow. It is a non-GPU-accelerated counterpart of simple CSS transformation functions with the drawback of requiring duplicated content.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"duplicated\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Duplicated content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">position</span>: absolute;\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">overflow</span>: hidden;\n <span class=\"hljs-attribute\">transition</span>: height <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.container</span> &gt; <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n}\n\n<span class=\"hljs-comment\">/* Static */</span>\n<span class=\"hljs-selector-class\">.container</span> {\n <span class=\"hljs-attribute\">position</span>: relative;\n}\n\n<span class=\"hljs-selector-class\">.duplicated</span> {\n <span class=\"hljs-attribute\">visibility</span>: hidden;\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/poPRqVE\">Encapsulated Content Duplication</a>. <br><strong>Ideal characteristics</strong>: 1, 2, 3, 4. <br><strong>Reference</strong>: <a href=\"https://stackoverflow.com/a/35657876\">\"How can I transition height: 0; to height: auto; using CSS?\", answer by Vivek Maharajh</a></p>\n<h4>Percentage <code>margin</code></h4>\n<p>These methods are usually flawed and based on a <a href=\"https://www.hongkiat.com/blog/calculate-css-percentage-margins\">misunderstanding of how the browser evaluates percentage margins and paddings</a>. We should avoid using percentage margins as a \"height-agnostic\" replacement for setting an arbitrary, predefined value to <code>max-height</code>; not least because doing so can lead to unexpected behaviours.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">margin-top</span>: -<span class=\"hljs-number\">100%</span>;\n <span class=\"hljs-attribute\">overflow</span>: hidden;\n <span class=\"hljs-attribute\">transition</span>: margin-top <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-class\">.toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.container</span> &gt; <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/* Static */</span>\n<span class=\"hljs-selector-class\">.container</span> {\n <span class=\"hljs-attribute\">position</span>: relative;\n <span class=\"hljs-attribute\">overflow</span>: hidden;\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/zYwNyVW\">Percentage <code>margin</code></a>. <br><strong>Ideal characteristics</strong>: 1, 3, 4. <br><strong>Reference</strong>: <a href=\"https://stackoverflow.com/a/35657876\">\"How can I transition height: 0; to height: auto; using CSS?\", answer by Vivek Maharajh</a></p>\n<h4>A Bit of Everything</h4>\n<p>Please refer to the referenced answer for a very detailed explanation of this method. The greatest strength of this method is that it addresses the problem of anisochronicity and apparent irreversibility in the Predefined max-height approach. However, it is not height-agnostic and relies on many more arbitrarily defined parameters than all other methods.</p>\n<p><strong>Ideal characteristics</strong>: 1, 3, 4, 6, 7. <br><strong>Reference</strong>: <a href=\"https://stackoverflow.com/a/43965099\">\"How can I transition height: 0; to height: auto; using CSS?\", answer by balpha</a></p>\n<h3>Proposed Solutions</h3>\n<p>Below are some of the solutions that I found while I was in the rabbit hole. Please do not hesitate to contact me should you find existing documentation for any of them.</p>\n<h4>Double Encapsulation and Pseudoelement</h4>\n<p>I initially arrived at this approach when I attempted to create a pure-CSS, height-agnostic menu with a wipe animation for this website. This method requires a pseudoelemnt with the same background behind the content it hides, which is also the biggest downside of this method. Its implementation relies on the following:</p>\n<ul>\n<li>An outer container without a specific height that wraps an inner container.</li>\n<li>A <code>relative</code>-positioned inner container element that encapsulates the \"animated\" content.</li>\n<li>An <code>absolute</code>-positioned pseudoelement that initially hides all content.</li>\n<li>Using <code>translate()</code> or <code>scale()</code> on the pseudoelement to make the content visible or hidden with transitions.</li>\n</ul>\n<p>The role of the inner container is two-fold:</p>\n<ul>\n<li>To provide a context for <code>100%</code> <code>height</code> to the pseudoelement.</li>\n<li>To mitigate the instantaneous collapsing of all elements for the collapse animation.</li>\n</ul>\n<p>The mitigation is a hack that functions by transitioning between <code>height: 0</code> and <code>height: 42%</code> <em>inside a containing block that does not have a specified</em> <code>height</code> (\"42%\" is chosen for clarity: this method works for <strong>any</strong> positive, non-zero percentage value). Under these conditions, the collapse of the inner container occurs at the end of the transition. In contrast, the corresponding transition involving a pair of non-interpolable values, such as <code>0</code> and <code>auto</code>, would result in the inner container collapsing at the <em>beginning</em> of the transition.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"outer-container\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"inner-container\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.inner-container</span> {\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">transition</span>: height <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-selector-class\">.collapsible</span><span class=\"hljs-selector-pseudo\">::before</span> {\n <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">' '</span>;\n <span class=\"hljs-attribute\">position</span>: absolute;\n <span class=\"hljs-attribute\">display</span>: block;\n <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scaleY</span>(<span class=\"hljs-number\">1</span>);\n <span class=\"hljs-attribute\">transform-origin</span>: bottom;\n <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-id\">#toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.outer-container</span> &gt; <span class=\"hljs-selector-class\">.inner-container</span> {\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">1%</span>;\n}\n\n<span class=\"hljs-selector-id\">#toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.outer-container</span> &gt; <span class=\"hljs-selector-class\">.inner-container</span> &gt; <span class=\"hljs-selector-class\">.collapsible</span><span class=\"hljs-selector-pseudo\">::before</span> {\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scaleY</span>(<span class=\"hljs-number\">0</span>);\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/gOWxNXp\">Double Encapsulation and Pseudoelement</a>. <br><strong>Ideal characteristics</strong>: 1, 2, 3, 4, 5, 6.</p>\n<h4>Encapsulated <code>scale()</code> Transformation Function</h4>\n<p>The proposed solution above relies on a pseudoelement to achieve a wipe effect without content deformation. With the <code>scale()</code> transformation, we can use one fewer container and do not need a pseudoelement if content deformation is not a concern.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scaleY</span>(<span class=\"hljs-number\">0</span>);\n <span class=\"hljs-attribute\">transform-origin</span>: top;\n <span class=\"hljs-attribute\">transition</span>: height <span class=\"hljs-number\">700ms</span>, transform <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-id\">#toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.container</span> {\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">42%</span>;\n <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scaleY</span>(<span class=\"hljs-number\">1</span>);\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/abWwzZd\">Encapsulated <code>scale()</code> Transformation Function</a>. <br><strong>Ideal characteristics</strong>: 1, 2, 3, 4, 5, 6.</p>\n<h4>Encapsulated <code>clip-path</code></h4>\n<p>This also does not require a pseudoelement and produces the same type of animation as the pseudoelement method. Transitioning the <code>clip-path</code> property is not hardware-accelerated in major browsers at the time of writing, but will <a href=\"https://developer.chrome.com/blog/hardware-accelerated-animations\">likely become available in the future</a>. Other than the current lack of support from hardware acceleration, this approach is much more versatile and elegant than the pseudoelement method.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">polygon</span>(<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>);\n <span class=\"hljs-attribute\">transition</span>: height <span class=\"hljs-number\">700ms</span>, clip-path <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-id\">#toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.container</span> &gt; <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">42%</span>;\n <span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">polygon</span>(<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100%</span>);\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/rNmwaLN\">Encapsulated <code>clip-path</code></a>. <br><strong>Ideal characteristics</strong>: 1, 2, 3, 4, 6.</p>\n<h4>Enforcing Aspect Ratio</h4>\n<p>This method draws inspiration from the <a href=\"https://css-tricks.com/aspect-ratio-boxes\">Aspect Ratio Boxes</a> article on <a href=\"https://css-tricks.com\">CSS Tricks</a>. With this approach, we transition the <code>width</code> property of an element, which we usually have better control over compared to height. This method is partially height-agnostic in that it works well for non-overflowing content designed to fill one or both dimensions of the collapsible.</p>\n<p>The code example below shows a more versatile version of this method that includes a container element. A container element is not necessary if the width of the collapsible in the fully expanded state is the same as its containing block.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.container</span> {\n <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">overflow</span>: hidden;\n}\n\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">56.25%</span>;\n <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'...'</span>);\n <span class=\"hljs-attribute\">background-position</span>: center;\n <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;\n <span class=\"hljs-attribute\">background-size</span>: contain;\n <span class=\"hljs-attribute\">overflow</span>: hidden;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-id\">#toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.container</span> {\n <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">400px</span>;\n}\n</code></pre><p>Most modern browsers now support the <code>aspect-ratio</code> CSS property. Using this CSS property does not require a container, and the collapsible can accommodate any type of content without any <code>position</code> hacks.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toggle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"collapsible\"</span>&gt;</span>\n <span class=\"hljs-comment\">&lt;!-- Content --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Collapsed */</span>\n<span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">0</span>;\n <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n aspect-ratio: <span class=\"hljs-number\">16</span> / <span class=\"hljs-number\">9</span>;\n <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'...'</span>);\n <span class=\"hljs-attribute\">background-position</span>: center;\n <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;\n <span class=\"hljs-attribute\">background-size</span>: contain;\n <span class=\"hljs-attribute\">overflow</span>: hidden;\n <span class=\"hljs-attribute\">transition</span>: visibility <span class=\"hljs-number\">700ms</span>, max-width <span class=\"hljs-number\">700ms</span>;\n}\n\n<span class=\"hljs-comment\">/* Expanded */</span>\n<span class=\"hljs-selector-id\">#toggle</span><span class=\"hljs-selector-pseudo\">:checked</span> ~ <span class=\"hljs-selector-class\">.collapsible</span> {\n <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">400px</span>;\n}\n</code></pre><p><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/VwbWwNK\">Enforcing Aspect Ratio with <code>padding</code></a>. <br><strong>CodePen demo</strong>: <a href=\"https://codepen.io/honmanyau/full/dyWRyEp\">Enforcing Aspect Ratio with <code>aspect-ratio</code></a>. <br><strong>Ideal characteristics</strong>: 1, 2,* 3, 4, 6, 7. * When content doesn't overflow the available space <br><strong>Reference</strong>: <a href=\"https://css-tricks.com/aspect-ratio-boxes\">Aspect Ratio Boxes</a>.</p>\n<h3>Concluding Remarks</h3>\n<p>There are broadly two categories of height-agnostic solutions described above: those exhibit ideal characteristics 7, and those do not. In the first category, I feel that the <code>line-height</code> and <code>font-size</code> methods are the most versatile when used together with <code>em</code>-sized content.</p>\n<p>There are equally good approaches in the second category with different types of animation. My personal favourite is the <code>clip-path</code> method since it doesn't deform content and can accommodate different shapes. Once hardware acceleration is available for <code>clip-path</code> transitions, there is little to dislike about this method.</p>\n<p>I have dabbled with other CSS properties such as writing-mode (for taking advantage of <code>height</code>-based percentage <code>margin</code>), <code>clamp()</code>, and CSS variables but failed to come up with anything meaningful. I feel that there are still better solutions than those already covered here. And the rabbit hole doesn't end there — not least because we could measure performance, accessibility, etc. — but the exploration has to stop somewhere.</p>\n<p>As the information covered in this article is time-sensitive, I will only update this article to correct mistakes, add missing references, and add examples that use the same set of CSS features as when it was available at the time this was first published.</p>\n"}